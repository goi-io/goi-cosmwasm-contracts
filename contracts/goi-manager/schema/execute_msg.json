{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "managed_status_changed_hook"
      ],
      "properties": {
        "managed_status_changed_hook": {
          "$ref": "#/definitions/ManagedStatusChangedHookMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "add_managed_contract"
      ],
      "properties": {
        "add_managed_contract": {
          "type": "object",
          "required": [
            "asset_owner",
            "contract_type"
          ],
          "properties": {
            "asset_name": {
              "type": [
                "string",
                "null"
              ]
            },
            "asset_owner": {
              "$ref": "#/definitions/Addr"
            },
            "contract_type": {
              "$ref": "#/definitions/AssetTypes"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "group_admin_hooks"
      ],
      "properties": {
        "group_admin_hooks": {
          "type": "object",
          "required": [
            "group_admin_hooks_msg"
          ],
          "properties": {
            "group_admin_hooks_msg": {
              "$ref": "#/definitions/ExecuteMsg"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_fees"
      ],
      "properties": {
        "update_fees": {
          "type": "object",
          "properties": {
            "add": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/ManagementFee"
              }
            },
            "remove": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "add_players_to_team"
      ],
      "properties": {
        "add_players_to_team": {
          "type": "object",
          "required": [
            "players"
          ],
          "properties": {
            "players": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PlayerInfo"
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_asset_for_sale_status_hook"
      ],
      "properties": {
        "update_asset_for_sale_status_hook": {
          "type": "object",
          "required": [
            "for_sale_status"
          ],
          "properties": {
            "for_sale_status": {
              "type": "boolean"
            },
            "price": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Coin"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "managed_asset_sold_hook"
      ],
      "properties": {
        "managed_asset_sold_hook": {
          "type": "object",
          "required": [
            "new_owner"
          ],
          "properties": {
            "new_owner": {
              "$ref": "#/definitions/Addr"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "withdraw"
      ],
      "properties": {
        "withdraw": {
          "type": "object",
          "required": [
            "amount",
            "recipient"
          ],
          "properties": {
            "amount": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coin"
              }
            },
            "recipient": {
              "$ref": "#/definitions/Addr"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "add_season_to_league"
      ],
      "properties": {
        "add_season_to_league": {
          "type": "object",
          "required": [
            "season"
          ],
          "properties": {
            "season": {
              "$ref": "#/definitions/Season"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "add_teams_to_league"
      ],
      "properties": {
        "add_teams_to_league": {
          "type": "object",
          "required": [
            "sending_user",
            "teams"
          ],
          "properties": {
            "sending_user": {
              "$ref": "#/definitions/Addr"
            },
            "teams": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Addr"
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "invite_teams_to_league"
      ],
      "properties": {
        "invite_teams_to_league": {
          "type": "object",
          "required": [
            "season_id",
            "sending_user",
            "teams"
          ],
          "properties": {
            "season_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "sending_user": {
              "$ref": "#/definitions/Addr"
            },
            "teams": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Addr"
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_invite_status"
      ],
      "properties": {
        "update_invite_status": {
          "type": "object",
          "required": [
            "invite_id",
            "invite_status_type"
          ],
          "properties": {
            "invite_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "invite_status_type": {
              "$ref": "#/definitions/InviteMessageStatusTypes"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "request_to_join_league"
      ],
      "properties": {
        "request_to_join_league": {
          "type": "object",
          "required": [
            "season_id"
          ],
          "properties": {
            "season_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "AssetTypes": {
      "type": "string",
      "enum": [
        "Team",
        "League",
        "Display",
        "App"
      ]
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "ExecuteMsg": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "remove_hook"
          ],
          "properties": {
            "remove_hook": {
              "type": "object",
              "required": [
                "addr"
              ],
              "properties": {
                "addr": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "add_hook"
          ],
          "properties": {
            "add_hook": {
              "type": "object",
              "required": [
                "addr"
              ],
              "properties": {
                "addr": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "update_admin"
          ],
          "properties": {
            "update_admin": {
              "type": "object",
              "properties": {
                "admin_addr": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "update_members"
          ],
          "properties": {
            "update_members": {
              "type": "object",
              "required": [
                "add",
                "remove"
              ],
              "properties": {
                "add": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Member"
                  }
                },
                "remove": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Fee": {
      "type": "object",
      "required": [
        "fee_type",
        "percent",
        "to_address"
      ],
      "properties": {
        "description": {
          "type": [
            "string",
            "null"
          ]
        },
        "fee_type": {
          "$ref": "#/definitions/FeeType"
        },
        "percent": {
          "$ref": "#/definitions/Decimal"
        },
        "to_address": {
          "$ref": "#/definitions/Addr"
        }
      }
    },
    "FeeType": {
      "type": "string",
      "enum": [
        "Dev",
        "ServiceProvider"
      ]
    },
    "InviteMessageStatusTypes": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "sender_cancelled"
          ],
          "properties": {
            "sender_cancelled": {
              "type": "object"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "recipient_accepted"
          ],
          "properties": {
            "recipient_accepted": {
              "type": "object"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "recipient_declined"
          ],
          "properties": {
            "recipient_declined": {
              "type": "object"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "new"
          ],
          "properties": {
            "new": {
              "type": "object"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ManagedStatus": {
      "type": "string",
      "enum": [
        "pending",
        "enabled",
        "disabled",
        "suspended"
      ]
    },
    "ManagedStatusChangedHookMsg": {
      "type": "object",
      "required": [
        "change"
      ],
      "properties": {
        "change": {
          "$ref": "#/definitions/ManagedStatusUpdate"
        }
      }
    },
    "ManagedStatusUpdate": {
      "type": "object",
      "required": [
        "managed_contract",
        "managed_status",
        "manager_contract"
      ],
      "properties": {
        "managed_contract": {
          "type": "string"
        },
        "managed_status": {
          "$ref": "#/definitions/ManagedStatus"
        },
        "manager_contract": {
          "type": "string"
        }
      }
    },
    "ManagementFee": {
      "type": "object",
      "required": [
        "active",
        "created_at_block_height",
        "fees",
        "id"
      ],
      "properties": {
        "active": {
          "type": "boolean"
        },
        "created_at_block_height": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "fees": {
          "$ref": "#/definitions/Fee"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Member": {
      "description": "A group member has a weight associated with them. This may all be equal, or may have meaning in the app that makes use of the group (eg. voting power)",
      "type": "object",
      "required": [
        "addr",
        "weight"
      ],
      "properties": {
        "addr": {
          "type": "string"
        },
        "weight": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "PlayerInfo": {
      "type": "object",
      "required": [
        "address",
        "first_name",
        "last_name",
        "position"
      ],
      "properties": {
        "address": {
          "$ref": "#/definitions/Addr"
        },
        "assigned_team_address": {
          "anyOf": [
            {
              "$ref": "#/definitions/Addr"
            },
            {
              "type": "null"
            }
          ]
        },
        "first_name": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        },
        "position": {
          "$ref": "#/definitions/Positions"
        }
      }
    },
    "Positions": {
      "type": "string",
      "enum": [
        "r_b",
        "q_b",
        "w_r1",
        "w_r2",
        "c_o",
        "g_l",
        "g_r",
        "s",
        "c_b1",
        "c_b2",
        "l_b",
        "c_d",
        "t_r",
        "t_l"
      ]
    },
    "Season": {
      "type": "object",
      "required": [
        "current_episode",
        "end_date",
        "id",
        "league",
        "name",
        "start_date"
      ],
      "properties": {
        "access_type": {
          "anyOf": [
            {
              "$ref": "#/definitions/SeasonAccessTypes"
            },
            {
              "type": "null"
            }
          ]
        },
        "content_status": {
          "anyOf": [
            {
              "$ref": "#/definitions/Visibility"
            },
            {
              "type": "null"
            }
          ]
        },
        "current_episode": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "description": {
          "type": [
            "string",
            "null"
          ]
        },
        "end_date": {
          "$ref": "#/definitions/Timestamp"
        },
        "id": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "league": {
          "$ref": "#/definitions/Addr"
        },
        "max_teams_allowed": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint32",
          "minimum": 0.0
        },
        "name": {
          "type": "string"
        },
        "number_of_episodes": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint32",
          "minimum": 0.0
        },
        "season_type": {
          "anyOf": [
            {
              "$ref": "#/definitions/SeasonTypes"
            },
            {
              "type": "null"
            }
          ]
        },
        "start_date": {
          "$ref": "#/definitions/Timestamp"
        },
        "status": {
          "anyOf": [
            {
              "$ref": "#/definitions/SeasonStatus"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "SeasonAccessTypes": {
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "Open",
            "Invitational"
          ]
        },
        {
          "type": "object",
          "required": [
            "Continuation"
          ],
          "properties": {
            "Continuation": {
              "type": "object",
              "required": [
                "prior_season"
              ],
              "properties": {
                "prior_season": {
                  "$ref": "#/definitions/Addr"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "Fee"
          ],
          "properties": {
            "Fee": {
              "type": "object",
              "required": [
                "coin"
              ],
              "properties": {
                "coin": {
                  "$ref": "#/definitions/Coin"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "SeasonStatus": {
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "Active",
            "Pending",
            "Cancelled"
          ]
        },
        {
          "type": "object",
          "required": [
            "Paused"
          ],
          "properties": {
            "Paused": {
              "type": "object",
              "required": [
                "resume_date"
              ],
              "properties": {
                "resume_date": {
                  "$ref": "#/definitions/Timestamp"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "SeasonTypes": {
      "type": "string",
      "enum": [
        "NotSet",
        "Practice",
        "Pre",
        "Regular",
        "Playoff",
        "Championship"
      ]
    },
    "Timestamp": {
      "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    },
    "Visibility": {
      "type": "string",
      "enum": [
        "Published",
        "UnPublished"
      ]
    }
  }
}
