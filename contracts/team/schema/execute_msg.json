{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "managed_service_message"
      ],
      "properties": {
        "managed_service_message": {
          "type": "object",
          "required": [
            "message"
          ],
          "properties": {
            "message": {
              "$ref": "#/definitions/ManagedExecuteMsg"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "add_players_to_team"
      ],
      "properties": {
        "add_players_to_team": {
          "type": "object",
          "required": [
            "players"
          ],
          "properties": {
            "players": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PlayerInfo"
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "remove_players_from_team"
      ],
      "properties": {
        "remove_players_from_team": {
          "type": "object",
          "required": [
            "players"
          ],
          "properties": {
            "players": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PlayerInfo"
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_invite_status"
      ],
      "properties": {
        "update_invite_status": {
          "type": "object",
          "required": [
            "invite_id",
            "updated_invite_message_status"
          ],
          "properties": {
            "invite_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "updated_invite_message_status": {
              "$ref": "#/definitions/InviteMessageStatusTypes"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "request_to_join_league"
      ],
      "properties": {
        "request_to_join_league": {
          "type": "object",
          "required": [
            "season_id"
          ],
          "properties": {
            "season_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "ExecuteMsg": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "buy"
          ],
          "properties": {
            "buy": {
              "type": "object"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "update"
          ],
          "properties": {
            "update": {
              "type": "object",
              "required": [
                "for_sale_status"
              ],
              "properties": {
                "for_sale_status": {
                  "type": "boolean"
                },
                "price": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Coin"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "InviteMessageStatusTypes": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "sender_cancelled"
          ],
          "properties": {
            "sender_cancelled": {
              "type": "object"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "recipient_accepted"
          ],
          "properties": {
            "recipient_accepted": {
              "type": "object"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "recipient_declined"
          ],
          "properties": {
            "recipient_declined": {
              "type": "object"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "new"
          ],
          "properties": {
            "new": {
              "type": "object"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ManagedExecuteMsg": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "saleable"
          ],
          "properties": {
            "saleable": {
              "type": "object",
              "required": [
                "saleable_msg"
              ],
              "properties": {
                "saleable_msg": {
                  "$ref": "#/definitions/ExecuteMsg"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "update_manager"
          ],
          "properties": {
            "update_manager": {
              "type": "object",
              "required": [
                "manager_address"
              ],
              "properties": {
                "manager_address": {
                  "$ref": "#/definitions/Addr"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "group_admin_hooks"
          ],
          "properties": {
            "group_admin_hooks": {
              "type": "object",
              "required": [
                "group_admin_hooks_msg"
              ],
              "properties": {
                "group_admin_hooks_msg": {
                  "$ref": "#/definitions/ExecuteMsg"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "PlayerInfo": {
      "type": "object",
      "required": [
        "address",
        "first_name",
        "last_name",
        "position"
      ],
      "properties": {
        "address": {
          "$ref": "#/definitions/Addr"
        },
        "assigned_team_address": {
          "anyOf": [
            {
              "$ref": "#/definitions/Addr"
            },
            {
              "type": "null"
            }
          ]
        },
        "first_name": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        },
        "position": {
          "$ref": "#/definitions/Positions"
        }
      }
    },
    "Positions": {
      "type": "string",
      "enum": [
        "r_b",
        "q_b",
        "w_r1",
        "w_r2",
        "c_o",
        "g_l",
        "g_r",
        "s",
        "c_b1",
        "c_b2",
        "l_b",
        "c_d",
        "t_r",
        "t_l"
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
